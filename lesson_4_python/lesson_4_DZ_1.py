#  Базовая задача lesson_3_DZ_4: Определить, какое число в массиве встречается чаще всего.
#  Задача основная: Проанализировать скорость и сложность одного любого алгоритма,
#  разработанных в рамках домашнего задания первых трех уроков.

#  Данная задача имеет сложность О(n**2) так как влияющая переменная "nums" описывает количество
#  итераций в циклах и имеются вложенные циклы, что дают квадратичное увеличение сложности.
#  Подтверждается это замером времени выполнения кода, при "nums" = 15 код выполняется
#  за примерно 1.2*(10**-4) секунд,
#  при "nums" = 150 за 2.15*(10**-3) секунд,
#  при "nums" = 1500 за 2.1*(10**-1) секунд,
#  при "nums" = 15000 за 1.8*(10**1) секунд,
#  при "nums" = 150000 за 1.8*(10**3) секунд (реально долго ждал)

import random


def func():
    import time
    st_time = time.time()
    nums = 150000
    arr = [0] * nums
    for i in range(nums):
        arr[i] = int(random.random() * 10)
    print(arr)
    num = arr[0]
    max_frq = 1
    for i in range(nums - 1):
        frq = 1
        for k in range(i + 1, nums):
            if arr[i] == arr[k]:
                frq += 1
        if frq > max_frq:
            max_frq = frq
            num = arr[i]
    if max_frq > 1:
        # Почему все справочники пишут что нельзя вызывать циклы и ветвления в лямбда функциях?
        print(
            f'{max_frq} раз{(lambda vals: "a" if ((vals > 1) and (vals < 5)) else "")(max_frq)} '
            f'встречается число {num}')
    else:
        print('Все элементы уникальны')
    print(f'Время выполнения: {(time.time() - st_time)}')


if __name__ == "__main__":
    func()
